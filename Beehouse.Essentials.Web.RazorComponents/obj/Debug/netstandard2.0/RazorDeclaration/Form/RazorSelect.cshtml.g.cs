#pragma checksum "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.RazorComponents\Form\RazorSelect.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "874e60503df792437d7f545193983a720cdcca84"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Beehouse.Essentials.Web.RazorComponents.Form
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    public class RazorSelect : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 34 "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.RazorComponents\Form\RazorSelect.cshtml"
           
    [Parameter] string Label { get; set; }

    [Parameter] string SearchUrl { get; set; }

    [Parameter] string Argument { get; set; }

    [Parameter] string SelectedItem { get; set; }

    [Parameter] Action<string> ArgumentChanged { get; set; }

    [Parameter] Action<string> SelectedItemChanged { get; set; }

    [Parameter] Func<Task> OnSearchClick { get; set; }

    [Parameter] Func<Task> OnSelectItem { get; set; }


    [Parameter] ICollection<KeyValuePair<string, string>> ListData { get; set; }
    protected bool IsLoading { get; set; } = false;

    protected bool ListVisible { get; set; } = false;

    protected override async Task OnInitAsync()
    {
        if (!string.IsNullOrWhiteSpace(SearchUrl))
        {
            OnSearchClick += async () => await Search();
        }
    }

    private async Task Search()
    {
        ListVisible = true;
        IsLoading = true;

        _apiClient.AddParameter("argument", Argument);
        var resultList = await _apiClient.GetAsync<ICollection<KeyValuePair<string, string>>>(SearchUrl);

        IsLoading = false;
        if (resultList == null || resultList.Content == null) return;

        ListData = resultList.Content;

        StateHasChanged();
    }

    private void CloseList()
    {
        ListVisible = false;
        ListData = null;

        StateHasChanged();
    }

    private void ItemClicked(string key, string value)
    {
        // Apply selected values
        SelectedItem = key;
        Argument = value;

        // Invoke events
        SelectedItemChanged?.Invoke(key);
        OnSelectItem?.Invoke();

        // Close list div
        CloseList();
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Beehouse.Essentials.Web.Api.IApiClient _apiClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.Services.IUriHelper uriHelper { get; set; }
    }
}
#pragma warning restore 1591
