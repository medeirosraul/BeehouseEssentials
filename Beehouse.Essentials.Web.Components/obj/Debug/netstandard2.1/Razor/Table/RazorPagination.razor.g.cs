#pragma checksum "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.Components\Table\RazorPagination.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ae58bf94a9cf3e309dd4eb1dcd4349d78d9e2211"
// <auto-generated/>
#pragma warning disable 1591
namespace Beehouse.Essentials.Web.Components.Table
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Forms;
    using System.Text;
    public class RazorPagination : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "nav");
            builder.AddAttribute(1, "aria-label", "...");
            builder.AddMarkupContent(2, "\r\n    ");
            builder.OpenElement(3, "ul");
            builder.AddAttribute(4, "class", "pagination");
            builder.AddMarkupContent(5, "\r\n        ");
            builder.OpenElement(6, "li");
            builder.AddAttribute(7, "class", "page-item" + " " + (IsFirstPage ? "disabled" : ""));
            builder.AddMarkupContent(8, "\r\n            ");
            builder.OpenElement(9, "button");
            builder.AddAttribute(10, "class", "page-link");
            builder.AddAttribute(11, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, () => OnPageClick($"{BaseUrl}?page=1&limit={Limit}{GetQueryStringFilters()}", 1)));
            builder.AddAttribute(12, "href", "#");
            builder.AddContent(13, "Primeira");
            builder.CloseElement();
            builder.AddMarkupContent(14, "\r\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(15, "\r\n\r\n");
#line 10 "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.Components\Table\RazorPagination.razor"
         for (int i = 0; i < LinkCount; i++)
        {
            int current = LinkInit + i;
            if (current == Page)
            {

#line default
#line hidden
            builder.AddContent(16, "                ");
            builder.OpenElement(17, "li");
            builder.AddAttribute(18, "class", "page-item active");
            builder.AddAttribute(19, "aria-current", "page");
            builder.AddMarkupContent(20, "\r\n                    ");
            builder.OpenElement(21, "span");
            builder.AddAttribute(22, "class", "page-link");
            builder.AddContent(23, current);
            builder.AddContent(24, " ");
            builder.AddMarkupContent(25, "<span class=\"sr-only\">(current)</span>");
            builder.CloseElement();
            builder.AddMarkupContent(26, "\r\n                ");
            builder.CloseElement();
            builder.AddMarkupContent(27, "\r\n");
#line 18 "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.Components\Table\RazorPagination.razor"
            }
            else if (current <= PageCount)
            {

#line default
#line hidden
            builder.AddContent(28, "                ");
            builder.OpenElement(29, "li");
            builder.AddAttribute(30, "class", "page-item");
            builder.AddMarkupContent(31, "\r\n                    ");
            builder.OpenElement(32, "button");
            builder.AddAttribute(33, "class", "page-link");
            builder.AddAttribute(34, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, () => OnPageClick($"{BaseUrl}?page={current}&limit={Limit}{GetQueryStringFilters()}", current)));
            builder.AddContent(35, current);
            builder.CloseElement();
            builder.AddMarkupContent(36, "\r\n                ");
            builder.CloseElement();
            builder.AddMarkupContent(37, "\r\n");
#line 24 "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.Components\Table\RazorPagination.razor"
            }
        }

#line default
#line hidden
            builder.AddMarkupContent(38, "\r\n        ");
            builder.OpenElement(39, "li");
            builder.AddAttribute(40, "class", "page-item" + " " + (IsLastPage ? "disabled": ""));
            builder.AddMarkupContent(41, "\r\n            ");
            builder.OpenElement(42, "button");
            builder.AddAttribute(43, "class", "page-link");
            builder.AddAttribute(44, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, () => OnPageClick($"{BaseUrl}?page={PageCount}&limit={Limit}{GetQueryStringFilters()}", PageCount)));
            builder.AddMarkupContent(45, "Ãšltima");
            builder.CloseElement();
            builder.AddMarkupContent(46, "\r\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(47, "\r\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(48, "\r\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 34 "D:\Source\AuxiliarC_V3_Alpha\Beehouse.Essentials.Web.Components\Table\RazorPagination.razor"
 
    [Parameter] int Page { get; set; }
    [Parameter] EventCallback<int> PageChanged { get; set; }

    [Parameter] int Limit { get; set; }
    [Parameter] EventCallback<int> LimitChanged { get; set; }

    [Parameter] int Count { get; set; }
    [Parameter] EventCallback<int> CountChanged { get; set; }

    [Parameter] ICollection<KeyValuePair<string, string>> Filters { get; set; }
    [Parameter] EventCallback<ICollection<KeyValuePair<string, string>>> FiltersChanged { get; set; }

    string BaseUrl { get; set; }

    // Configuration Variables
    int LinkCount = 6;
    int LinkInit = 1;


    // State variables
    bool IsFirstPage;
    bool IsLastPage;
    int PageCount;

    protected override void OnParametersSet()
    {
        // Avoid zero
        Limit = Limit == 0 ? 10 : Limit;
        Page = Page == 0 ? 1 : Page;

        // Calc page count
        var pageCountFactor = (decimal)Count / (decimal)Limit;
        PageCount = pageCountFactor % 1 != 0 || pageCountFactor < 1
            ? (int)(pageCountFactor - (pageCountFactor % 1) + 1)
            : (int)pageCountFactor;

        IsFirstPage = Page == 1;
        IsLastPage = Page == PageCount;
        LinkInit = Page - LinkCount / 2 <= 1 ? 1 : Page - LinkCount / 2;

        // Get Base url
        BaseUrl = UriHelper.GetAbsoluteUri().Split('?')[0];
    }

    protected async Task OnPageClick(string uri, int page)
    {
        UriHelper.NavigateTo(uri, false);
        await PageChanged.InvokeAsync(page);
    }

    public string GetQueryStringFilters()
    {
        // Check filters
        if (Filters == null)
        {
            return "";
        }



        // Builder
        var builder = new StringBuilder();

        // Check all query items
        foreach (var item in Filters)
        {
            // Check if is pagination value (page, limit, etc) and not a filter
            if (IsPaginationValue(item.Key)) { continue; }

            // Append &
            builder.Append("&");

            // Append filter to querystring
            builder.Append(item.Key.ToLower() + "=" + item.Value);
        }

        // Returns querystring
        return builder.ToString();
    }

    private bool IsPaginationValue(string s)
    {
        switch (s)
        {
            case "page":
            case "limit":
                return true;
            default:
                return false;
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.IUriHelper UriHelper { get; set; }
    }
}
#pragma warning restore 1591
